// Code generated by mockery v2.44.1. DO NOT EDIT.

package userbusmocks

import (
	context "context"
	mail "net/mail"

	mock "github.com/stretchr/testify/mock"

	order "github.com/nhannguyenacademy/ecommerce/internal/sdkbus/order"

	page "github.com/nhannguyenacademy/ecommerce/internal/sdkbus/page"

	sqldb "github.com/nhannguyenacademy/ecommerce/internal/sdkbus/sqldb"

	userbus "github.com/nhannguyenacademy/ecommerce/internal/user/userbus"

	uuid "github.com/google/uuid"
)

// MockStorer is an autogenerated mock type for the Storer type
type MockStorer struct {
	mock.Mock
}

type MockStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorer) EXPECT() *MockStorer_Expecter {
	return &MockStorer_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, filter
func (_m *MockStorer) Count(ctx context.Context, filter userbus.QueryFilter) (int, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, userbus.QueryFilter) (int, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, userbus.QueryFilter) int); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, userbus.QueryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockStorer_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - filter userbus.QueryFilter
func (_e *MockStorer_Expecter) Count(ctx interface{}, filter interface{}) *MockStorer_Count_Call {
	return &MockStorer_Count_Call{Call: _e.mock.On("Count", ctx, filter)}
}

func (_c *MockStorer_Count_Call) Run(run func(ctx context.Context, filter userbus.QueryFilter)) *MockStorer_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(userbus.QueryFilter))
	})
	return _c
}

func (_c *MockStorer_Count_Call) Return(_a0 int, _a1 error) *MockStorer_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_Count_Call) RunAndReturn(run func(context.Context, userbus.QueryFilter) (int, error)) *MockStorer_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, usr
func (_m *MockStorer) Create(ctx context.Context, usr userbus.User) error {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, userbus.User) error); ok {
		r0 = rf(ctx, usr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockStorer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - usr userbus.User
func (_e *MockStorer_Expecter) Create(ctx interface{}, usr interface{}) *MockStorer_Create_Call {
	return &MockStorer_Create_Call{Call: _e.mock.On("Create", ctx, usr)}
}

func (_c *MockStorer_Create_Call) Run(run func(ctx context.Context, usr userbus.User)) *MockStorer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(userbus.User))
	})
	return _c
}

func (_c *MockStorer_Create_Call) Return(_a0 error) *MockStorer_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_Create_Call) RunAndReturn(run func(context.Context, userbus.User) error) *MockStorer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, usr
func (_m *MockStorer) Delete(ctx context.Context, usr userbus.User) error {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, userbus.User) error); ok {
		r0 = rf(ctx, usr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - usr userbus.User
func (_e *MockStorer_Expecter) Delete(ctx interface{}, usr interface{}) *MockStorer_Delete_Call {
	return &MockStorer_Delete_Call{Call: _e.mock.On("Delete", ctx, usr)}
}

func (_c *MockStorer_Delete_Call) Run(run func(ctx context.Context, usr userbus.User)) *MockStorer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(userbus.User))
	})
	return _c
}

func (_c *MockStorer_Delete_Call) Return(_a0 error) *MockStorer_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_Delete_Call) RunAndReturn(run func(context.Context, userbus.User) error) *MockStorer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewWithTx provides a mock function with given fields: tx
func (_m *MockStorer) NewWithTx(tx sqldb.CommitRollbacker) (userbus.Storer, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for NewWithTx")
	}

	var r0 userbus.Storer
	var r1 error
	if rf, ok := ret.Get(0).(func(sqldb.CommitRollbacker) (userbus.Storer, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(sqldb.CommitRollbacker) userbus.Storer); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(userbus.Storer)
		}
	}

	if rf, ok := ret.Get(1).(func(sqldb.CommitRollbacker) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_NewWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWithTx'
type MockStorer_NewWithTx_Call struct {
	*mock.Call
}

// NewWithTx is a helper method to define mock.On call
//   - tx sqldb.CommitRollbacker
func (_e *MockStorer_Expecter) NewWithTx(tx interface{}) *MockStorer_NewWithTx_Call {
	return &MockStorer_NewWithTx_Call{Call: _e.mock.On("NewWithTx", tx)}
}

func (_c *MockStorer_NewWithTx_Call) Run(run func(tx sqldb.CommitRollbacker)) *MockStorer_NewWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sqldb.CommitRollbacker))
	})
	return _c
}

func (_c *MockStorer_NewWithTx_Call) Return(_a0 userbus.Storer, _a1 error) *MockStorer_NewWithTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_NewWithTx_Call) RunAndReturn(run func(sqldb.CommitRollbacker) (userbus.Storer, error)) *MockStorer_NewWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, filter, orderBy, _a3
func (_m *MockStorer) Query(ctx context.Context, filter userbus.QueryFilter, orderBy order.By, _a3 page.Page) ([]userbus.User, error) {
	ret := _m.Called(ctx, filter, orderBy, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []userbus.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, userbus.QueryFilter, order.By, page.Page) ([]userbus.User, error)); ok {
		return rf(ctx, filter, orderBy, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, userbus.QueryFilter, order.By, page.Page) []userbus.User); ok {
		r0 = rf(ctx, filter, orderBy, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userbus.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, userbus.QueryFilter, order.By, page.Page) error); ok {
		r1 = rf(ctx, filter, orderBy, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockStorer_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - filter userbus.QueryFilter
//   - orderBy order.By
//   - _a3 page.Page
func (_e *MockStorer_Expecter) Query(ctx interface{}, filter interface{}, orderBy interface{}, _a3 interface{}) *MockStorer_Query_Call {
	return &MockStorer_Query_Call{Call: _e.mock.On("Query", ctx, filter, orderBy, _a3)}
}

func (_c *MockStorer_Query_Call) Run(run func(ctx context.Context, filter userbus.QueryFilter, orderBy order.By, _a3 page.Page)) *MockStorer_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(userbus.QueryFilter), args[2].(order.By), args[3].(page.Page))
	})
	return _c
}

func (_c *MockStorer_Query_Call) Return(_a0 []userbus.User, _a1 error) *MockStorer_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_Query_Call) RunAndReturn(run func(context.Context, userbus.QueryFilter, order.By, page.Page) ([]userbus.User, error)) *MockStorer_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryByEmail provides a mock function with given fields: ctx, email
func (_m *MockStorer) QueryByEmail(ctx context.Context, email mail.Address) (userbus.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for QueryByEmail")
	}

	var r0 userbus.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mail.Address) (userbus.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mail.Address) userbus.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(userbus.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mail.Address) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_QueryByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByEmail'
type MockStorer_QueryByEmail_Call struct {
	*mock.Call
}

// QueryByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email mail.Address
func (_e *MockStorer_Expecter) QueryByEmail(ctx interface{}, email interface{}) *MockStorer_QueryByEmail_Call {
	return &MockStorer_QueryByEmail_Call{Call: _e.mock.On("QueryByEmail", ctx, email)}
}

func (_c *MockStorer_QueryByEmail_Call) Run(run func(ctx context.Context, email mail.Address)) *MockStorer_QueryByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mail.Address))
	})
	return _c
}

func (_c *MockStorer_QueryByEmail_Call) Return(_a0 userbus.User, _a1 error) *MockStorer_QueryByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_QueryByEmail_Call) RunAndReturn(run func(context.Context, mail.Address) (userbus.User, error)) *MockStorer_QueryByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// QueryByID provides a mock function with given fields: ctx, userID
func (_m *MockStorer) QueryByID(ctx context.Context, userID uuid.UUID) (userbus.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for QueryByID")
	}

	var r0 userbus.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (userbus.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) userbus.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(userbus.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_QueryByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByID'
type MockStorer_QueryByID_Call struct {
	*mock.Call
}

// QueryByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockStorer_Expecter) QueryByID(ctx interface{}, userID interface{}) *MockStorer_QueryByID_Call {
	return &MockStorer_QueryByID_Call{Call: _e.mock.On("QueryByID", ctx, userID)}
}

func (_c *MockStorer_QueryByID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockStorer_QueryByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_QueryByID_Call) Return(_a0 userbus.User, _a1 error) *MockStorer_QueryByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_QueryByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (userbus.User, error)) *MockStorer_QueryByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, usr
func (_m *MockStorer) Update(ctx context.Context, usr userbus.User) error {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, userbus.User) error); ok {
		r0 = rf(ctx, usr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStorer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - usr userbus.User
func (_e *MockStorer_Expecter) Update(ctx interface{}, usr interface{}) *MockStorer_Update_Call {
	return &MockStorer_Update_Call{Call: _e.mock.On("Update", ctx, usr)}
}

func (_c *MockStorer_Update_Call) Run(run func(ctx context.Context, usr userbus.User)) *MockStorer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(userbus.User))
	})
	return _c
}

func (_c *MockStorer_Update_Call) Return(_a0 error) *MockStorer_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_Update_Call) RunAndReturn(run func(context.Context, userbus.User) error) *MockStorer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorer creates a new instance of MockStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorer {
	mock := &MockStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
